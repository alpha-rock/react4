{"version":3,"sources":["logo.svg","control-panel.js","map-style.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","defaultContainer","children","className","ControlPanel","Container","this","props","containerComponent","settings","year","class","style","key","type","value","min","max","step","onChange","evt","target","href","PureComponent","dataLayer","id","paint","property","stops","updatePercentiles","featureCollection","accessor","features","scale","scaleQuantile","domain","map","range","forEach","f","properties","percentile","App","state","data","hoveredFeature","viewport","latitude","longitude","zoom","bearing","pitch","_loadData","dpm","setState","_updateSettings","name","_onViewportChange","_onHover","event","srcEvent","offsetX","offsetY","find","layer","x","y","requestJson","error","response","left","top","sov_a3","height","width","mapStyle","onViewportChange","mapboxApiAccessToken","onHover","beforeId","_renderTooltip","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5b047aee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {PureComponent} from 'react';\r\n\r\nconst defaultContainer = ({children}) => <div className=\"control-panel\">{children}</div>;\r\n\r\nexport default class ControlPanel extends PureComponent {\r\n  render() {\r\n    const Container = this.props.containerComponent || defaultContainer;\r\n    const {settings} = this.props;\r\n\r\n    return (\r\n      <Container>\r\n        <h3>Death rate from suicides <b>{settings.year}</b> </h3>\r\n        <p>\r\n          Map showing the annual number of deaths from suicide per 100,000 people . Hover over a\r\n          country to see details.\r\n        </p>\r\n        Legend\r\n        <div class =\"row lege\">\r\n          <div class=\"col-sm-6\" >Low</div>\r\n          <div class=\"col-sm-6\" style={{\"text-align\": \"end\"}} >High</div>\r\n        </div>\r\n        <br></br>\r\n        <div key={'year'} className=\"input\">\r\n          <label>YEAR</label>\r\n          <br></br>\r\n          1990\r\n          <input\r\n            type=\"range\"\r\n            value={settings.year}\r\n            min={1990}\r\n            max={2017}\r\n            step={1}\r\n            onChange={evt => this.props.onChange('year', evt.target.value)}\r\n          />2017\r\n        </div>\r\n        <br></br>\r\n        <p>\r\n          Data source: <a href=\"http://ghdx.healthdata.org/gbd-results-tool\">United States: Institute for Health Metrics and Evaluation (IHME)</a>\r\n        </p>\r\n        <div className=\"source-link\">\r\n          <a\r\n            href=\"https://uber.github.io/react-map-gl/\"\r\n            target=\"_new\"\r\n          >\r\n            See my code here\r\n          </a>\r\n        </div>\r\n        <hr />\r\n\r\n        \r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","// For more information on data-driven styles, see https://www.mapbox.com/help/gl-dds-ref/\r\nexport const dataLayer = {\r\n  id: 'data',\r\n  type: 'fill',\r\n  paint: {\r\n    'fill-color': {\r\n      property: 'percentile',\r\n      stops: [\r\n        [0, '#ffffff'], //#3288bd\r\n        [1, '#ffe1e1'], //#66c2a5\r\n        [2, '#ffc1c1'],\r\n        [3, '#ff9e9e'],\r\n        [4, '#ff8080'],\r\n        [5, '#ff5f5f'],\r\n        [6, '#ff3f3f'],\r\n        [7, '#ff1a1a'],\r\n        [8, '#ff0000']\r\n      ]\r\n    }, \r\n    'fill-opacity': 0.6\r\n  }\r\n};\r\n","import {range} from 'd3-array';\r\nimport {scaleQuantile} from 'd3-scale';\r\n\r\nexport function updatePercentiles(featureCollection, accessor) {\r\n  const {features} = featureCollection;\r\n  const scale = scaleQuantile()\r\n    .domain(features.map(accessor))\r\n    .range(range(9));\r\n  features.forEach(f => {\r\n    const value = accessor(f);\r\n    f.properties.value = value;\r\n    f.properties.percentile = scale(value);\r\n  });\r\n}\r\n","\nimport logo from './logo.svg';\nimport './App.css';\n\n\n\nimport React, {Component} from 'react';\nimport {render} from 'react-dom';\nimport MapGL, {Source, Layer} from 'react-map-gl';\nimport ControlPanel from './control-panel';\n\nimport {dataLayer} from './map-style.js';\nimport {updatePercentiles} from './utils';\nimport {json as requestJson} from 'd3-request';\n\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiYWxwaGEtc2lzb2RpeWEiLCJhIjoiY2p6MmppOXM2MDcwaDNtbDlmeDU2ZDR1biJ9.AMeqwiRdGPHuNjsIC1cJ8w'; // Set your mapbox token here\nconst MAPBOX_STYLE = 'mapbox://styles/alpha-sisodiya/cjzh2rw962odm1cqx34m2s0ix';\nexport default class App extends Component {\n  state = {\n    year: 2017,\n    data: null,\n    hoveredFeature: null,\n    viewport: {\n      latitude: 46.17,\n      longitude: 43,\n      zoom: 2,\n      bearing: 0,\n      pitch: 0\n    }\n  };\n\n  componentDidMount() {\n    requestJson(\n      'https://raw.githubusercontent.com/alpha-rock/DataHosting/master/final4.geojson',\n      (error, response) => {\n        if (!error) {\n          this._loadData(response);\n        }\n      }\n    );\n  }\n\n  _loadData = data => {\n    updatePercentiles(data, f => f.properties.dpm[this.state.year]);\n    this.setState({data});\n  };\n\n  _updateSettings = (name, value) => {\n    if (name === 'year') {\n      this.setState({year: value});\n\n      const {data} = this.state;\n      if (data) {\n        updatePercentiles(data, f => f.properties.dpm[value]);\n        // trigger update\n        this.setState({data: {...data}});\n      }\n    }\n  };\n\n  _onViewportChange = viewport => this.setState({viewport});\n\n  _onHover = event => {\n    const {\n      features,\n      srcEvent: {offsetX, offsetY}\n    } = event;\n    const hoveredFeature = features && features.find(f => f.layer.id === 'data');\n\n    this.setState({hoveredFeature, x: offsetX, y: offsetY});\n  };\n\n  _renderTooltip() {\n    const {hoveredFeature, x, y} = this.state;\n\n    return (\n      hoveredFeature && (\n        <div className=\"tooltip\" style={{left: x, top: y}}>\n          <div>Country :<b> {hoveredFeature.properties.name}</b></div>\n          <div>Death per 100000 people: <b>{hoveredFeature.properties.value}</b></div>\n          <div>Percentile: <b>{(hoveredFeature.properties.percentile / 8) * 100}</b></div>\n          <div>Code: <b>{hoveredFeature.properties.sov_a3}</b></div>\n        </div>\n      )\n    );\n  }\n\n  render() {\n    const {viewport, data} = this.state;\n\n    return (\n      <div style={{height: '100%'}} class=\"holder\">\n        <ControlPanel\n          containerComponent={this.props.containerComponent}\n          settings={this.state}\n          onChange={this._updateSettings}\n        />\n        <MapGL\n          {...viewport}\n          width=\"100%\"\n          height=\"100%\"\n          mapStyle=\"mapbox://styles/alpha-sisodiya/ck57cx3li00wl1crsehm5tbnj\"\n          onViewportChange={this._onViewportChange}\n          mapboxApiAccessToken={MAPBOX_TOKEN}\n          onHover={this._onHover}\n        >\n          <Source type=\"geojson\" data={data}>\n            <Layer beforeId=\"admin-0-boundary\" {...dataLayer} />\n            \n          </Source>\n          {this._renderTooltip()}\n        </MapGL>\n\n        \n      </div>\n    );\n  }\n}\n\nexport function renderToDom(container) {\n  render(<App />, container);\n}\n\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}